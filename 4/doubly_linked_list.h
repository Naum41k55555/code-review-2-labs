/*
    Продолжение задания 4 заголовочный файл
    Дан двусвязный линейный список и указатель первый элемент этого 
    списка. Все элементы списка хранят различные между собой значения. Необходимо 
    вывести значения элементов списка, которые находятся между наименьшим и 
    наибольшим элементами списка, в том порядке, в каком они находятся в исходном 
    списке. Использовать процедуры. 

    Все динамические структуры данных реализовывать через классы. Не использовать STL.  
    Для каждой динамической структуры должен быть предусмотрен
    стандартный набор методов - добавления/удаления/вывода элементов. 
    Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.
*/


#ifndef DOUBLY_LINKED_LIST_H
#define DOUBLY_LINKED_LIST_H

/**
 * @struct Node
 * @brief Структура, представляющая узел в двусвязном списке.
 * @details Содержит целочисленное значение и указатели на предыдущий и следующий узлы.
 */
struct Node {
	int data;
	Node* prev;
	Node* next;

	/**
	 * @brief Конструктор узла.
	 * @param value Целочисленное значение, которое будет храниться в узле.
	 */
	explicit Node(int value) : data(value), prev(nullptr), next(nullptr) {}
};

/**
 * @class DoublyLinkedList
 * @brief Класс, реализующий структуру данных "двусвязный список".
 * @details Предоставляет основные операции для работы со списком, включая
 * добавление в конец за O(1) и очистку.
 */
class DoublyLinkedList {
public:
	/**
	 * @brief Конструктор по умолчанию.
	 * @details Создает пустой список.
	 */
	DoublyLinkedList();

	/**
	 * @brief Деструктор.
	 * @details Освобождает всю память, выделенную под узлы списка.
	 */
	~DoublyLinkedList();

	/**
	 * @brief Добавляет элемент в конец списка за O(1).
	 * @param value Целочисленное значение для добавления.
	 */
	void Append(int value);

	/**
	 * @brief Проверяет, пуст ли список.
	 * @return `true`, если список пуст, иначе `false`.
	 */
	bool IsEmpty() const;

	/**
	 * @brief Полностью очищает список, удаляя все узлы.
	 */
	void Clear();

	/**
	 * @brief Выводит содержимое списка в консоль.
	 */
	void Display() const;

	/**
	 * @brief Возвращает указатель на начало списка для итерации (только чтение).
	 * @return Константный указатель на головной узел.
	 */
	const Node* GetHead() const;

private:
	/**
	 * @brief Указатель на начало ("голову") списка.
	 */
	Node* head_ptr_;

	/**
	 * @brief Указатель на конец ("хвост") списка.
	 */
	Node* tail_ptr_;
};

#endif // DOUBLY_LINKED_LIST_H
