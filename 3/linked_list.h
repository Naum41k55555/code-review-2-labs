/*
    Продолжение задания №3 заголовочного файла
    Дан текстовый файл, в первой строке которого хранится число N, а во второй
    строке N целых чисел. Необходимо создать упорядоченный по убыванию список, в который
    поместить все эти элементы, при этом очередной элемент вставлять в список так, чтобы не
    нарушалась его упорядоченность.

    Для каждой динамической структуры должен быть предусмотрен стандартный набор методов - 
    добавления/удаления/вывода элементов. 
    Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.
*/

#ifndef LINKED_LIST_H
#define LINKED_LIST_H

#include <string>

/**
 * @struct Node
 * @brief Структура, представляющая узел в односвязном списке.
 * @details Каждый узел содержит целочисленное значение и указатель на следующий узел.
 */
struct Node {
	int data;
	Node* next;

	/**
	 * @brief Конструктор узла.
	 * @param value Целочисленное значение, которое будет храниться в узле.
	 */
	explicit Node(int value) : data(value), next(nullptr) {}
};

/**
 * @class LinkedList
 * @brief Класс, реализующий упорядоченный по убыванию односвязный список.
 * @details Обеспечивает вставку элементов с сохранением порядка сортировки.
 */
class LinkedList {
public:
	/**
	 * @brief Конструктор по умолчанию.
	 * @details Создает пустой список.
	 */
	LinkedList();

	/**
	 * @brief Деструктор.
	 * @details Освобождает всю память, выделенную под узлы списка.
	 */
	~LinkedList();

	/**
	 * @brief Вставляет элемент в список, сохраняя порядок сортировки по убыванию.
	 * @param value Целочисленное значение для вставки.
	 */
	void InsertSorted(int value);

	/**
	 * @brief Удаляет первое вхождение элемента с заданным значением.
	 * @param value Значение элемента для удаления.
	 * @return `true`, если элемент был найден и удален, иначе `false`.
	 */
	bool DeleteValue(int value);

	/**
	 * @brief Проверяет, пуст ли список.
	 * @return `true`, если список пуст, иначе `false`.
	 */
	bool IsEmpty() const;

	/**
	 * @brief Полностью очищает список, удаляя все узлы.
	 */
	void Clear();

	/**
	 * @brief Выводит содержимое списка в консоль.
	 */
	void Display() const;

    /**
	 * @brief Возвращает указатель на начало списка для итерации (только чтение).
	 * @return Константный указатель на головной узел.
	 */
	const Node* GetHead() const;

private:
	/**
	 * @brief Указатель на начало ("голову") списка.
	 */
	Node* head_ptr_;
};

#endif // LINKED_LIST_H
