/* 
    Продолжение задания №2 заголовочного файла
    Дан набор из 10 чисел. Создать две очереди: первая должна содержать числа из
    исходного набора с нечетными номерами (1, 3, …, 9), а вторая — с четными (2, 4, …, 10);
    порядок чисел в каждой очереди должен совпадать с порядком чисел в исходном наборе.
    Вывести указатели на начало и конец первой, а затем второй очереди.

    Для каждой динамической структуры должен быть предусмотрен стандартный набор методов - 
    добавления/удаления/вывода элементов. 
    Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.

    В заданиях данной подгруппы структура «очередь» (queue) моделируется цепочкой связанных
    узлов-записей типа TNode. Поле Next последнего элемента цепочки равно nullptr. Началом
    очереди («головой», head) считается первый элемент цепочки, концом («хвостом», tail) — ее
    последний элемент. Для возможности быстрого добавления в конец очереди нового элемента
    удобно хранить, помимо указателя на начало очереди, также и указатель на ее конец. В случае
    пустой очереди указатели на ее начало и конец полагаются равными nullptr. Как и для стека,
    значением элемента очереди считается значение его поля Data.
*/

#ifndef QUEUE_H
#define QUEUE_H

/**
 * @struct Node
 * @brief Структура, представляющая узел в односвязном списке очереди.
 * @details Каждый узел содержит целочисленное значение и указатель на следующий узел.
 */
struct Node {
	int data;
	Node* next;

	/**
	 * @brief Конструктор узла.
	 * @param value Целочисленное значение, которое будет храниться в узле.
	 */
	explicit Node(int value) : data(value), next(nullptr) {}
};

/**
 * @class Queue
 * @brief Класс, реализующий структуру данных "очередь" на основе односвязного списка.
 * @details Предоставляет основные операции для работы с очередью: добавление в конец (Enqueue),
 * удаление из начала (Dequeue) и получение адресов начала и конца.
 */
class Queue {
public:
	/**
	 * @brief Конструктор по умолчанию.
	 * @details Создает пустую очередь.
	 */
	Queue();

	/**
	 * @brief Деструктор.
	 * @details Освобождает всю память, выделенную под узлы очереди.
	 */
	~Queue();

	/**
	 * @brief Добавляет элемент в конец очереди.
	 * @param value Целочисленное значение для добавления.
	 */
	void Enqueue(int value);

	/**
	 * @brief Удаляет элемент из начала очереди.
	 * @details Если очередь пуста, выводит сообщение об ошибке в stderr.
	 */
	void Dequeue();

	/**
	 * @brief Проверяет, пуста ли очередь.
	 * @return `true`, если очередь пуста, иначе `false`.
	 */
	bool IsEmpty() const;

	/**
	 * @brief Выводит содержимое очереди в консоль.
	 * @details Элементы выводятся, начиная от "головы" к "хвосту".
	 */
	void Display() const;

	/**
	 * @brief Возвращает адрес узла в начале очереди.
	 * @return Константный указатель на начальный узел или `nullptr`, если очередь пуста.
	 */
	const Node* GetHeadAddress() const;

	/**
	 * @brief Возвращает адрес узла в конце очереди.
	 * @return Константный указатель на конечный узел или `nullptr`, если очередь пуста.
	 */
	const Node* GetTailAddress() const;

private:
	/**
	 * @brief Указатель на начало ("голову") очереди.
	 */
	Node* head_ptr_;

	/**
	 * @brief Указатель на конец ("хвост") очереди.
	 */
	Node* tail_ptr_;
};

#endif // QUEUE_H
