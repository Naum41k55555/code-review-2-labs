/*
    Продолжение задачи №1 стека (stack) файл заголовка
    Дано число D и указатель P1 на вершину непустого стека. 
    Добавить элемент со значением D в стек и вывести адрес P2 новой вершины стека.

    Для каждой динамической структуры должен быть предусмотрен стандартный набор методов - 
    добавления/удаления/вывода элементов. 
    Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.

    В заданиях подгруппы структура «стек» (stack) моделируется цепочкой связанных
    узлов-записей типа TNode. Поле Next последнего элемента цепочки равно nullptr. Вершиной
    стека (top) считается первый элемент цепочки. Для доступа к стеку используется указатель на
    его вершину (для пустого стека данный указатель полагается равным nullptr). Значением
    элемента стека считается значение его поля Data
*/

#ifndef STACK_H
#define STACK_H

#include <iostream>

/**
 * @struct Node
 * @brief Структура, представляющая узел в односвязном списке стека.
 * @details Каждый узел содержит целочисленное значение и указатель на следующий узел.
 */
struct Node {
	int data;
	Node* next;

	/**
	 * @brief Конструктор узла.
	 * @param value Целочисленное значение, которое будет храниться в узле.
	 */
	explicit Node(int value) : data(value), next(nullptr) {}
};

/**
 * @class Stack
 * @brief Класс, реализующий структуру данных "стек" на основе односвязного списка.
 * @details Предоставляет основные операции для работы со стеком: добавление (Push),
 * удаление (Pop), чтение верхнего элемента (Top) и проверку на пустоту (IsEmpty).
 */
class Stack {
public:
	/**
	 * @brief Конструктор по умолчанию.
	 * @details Создает пустой стек.
	 */
	Stack();

	/**
	 * @brief Деструктор.
	 * @details Освобождает всю память, выделенную под узлы стека.
	 */
	~Stack();

	/**
	 * @brief Добавляет элемент на вершину стека.
	 * @param value Целочисленное значение для добавления.
	 */
	void Push(int value);

	/**
	 * @brief Удаляет верхний элемент стека.
	 * @details Если стек пуст, выводит сообщение об ошибке в stderr.
	 */
	void Pop();

	/**
	 * @brief Возвращает значение верхнего элемента стека без его удаления.
	 * @details Если стек пуст, выводит сообщение об ошибке в stderr и возвращает 0.
	 * @return Значение верхнего элемента стека.
	 */
	int Top() const;

	/**
	 * @brief Проверяет, пуст ли стек.
	 * @return `true`, если стек пуст, иначе `false`.
	 */
	bool IsEmpty() const;

	/**
	 * @brief Выводит содержимое стека в консоль.
	 * @details Элементы выводятся, начиная с вершины стека.
	 */
	void Display() const;

	/**
	 * @brief Возвращает адрес верхнего узла стека.
	 * @return Константный указатель на верхний узел или `nullptr`, если стек пуст.
	 */
	const Node* GetTopAddress() const;
    
private:
	/**
	 * @brief Указатель на вершину стека.
	 */
	Node* top_ptr_;
};

#endif // STACK_H
